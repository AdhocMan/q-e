! Implemented: i1, iv

#if defined(__CUDA)

PROGRAM test_mp_gather_{vname}_gpu
!
! Simple program to check the functionalities of mp_gather.
!
!
    USE cudafor
#if defined(__MPI)
    USE MPI
#endif
    USE mp, ONLY : mp_gather
    USE mp_world, ONLY : mp_world_start, mp_world_end, mpime, &
                          root, nproc, world_comm
    USE tester
    IMPLICIT NONE
    !
    TYPE(tester_t) :: test
    INTEGER :: rnk, valid_sum, world_group = 0
    INTEGER, PARAMETER :: datasize = {datasize}
    !
    ! Stuff for comparing with CPU implementation
    integer, allocatable :: seed(:)
    integer :: i, n
    REAL :: rnd{size}
    !
    ! test variable
    {type}, DEVICE :: {vname}_d{size}
    {type}, DEVICE :: all_{vname}_d{sizep1}
    {type} :: {vname}_h{size}
    {type} :: all_{vname}_h{sizep1}
    {type} :: aux_h{sizep1}
    
    !
    CALL test%init()
    
#if defined(__MPI)    
    world_group = MPI_COMM_WORLD
#endif
    CALL mp_world_start(world_group)
    !
    ! The sum of n ints with rank=1 is (zero based)
    !  sum = (n-1)*n*0.5
    !
    ! For a rank N matrix is size^N * sum
    !
    rnk = SIZE(SHAPE({vname}_h))
    valid_sum = ({datasize}**rnk) * (nproc-1)*nproc/2
    !
    {vname}_h = mpime
    {vname}_d = {vname}_h
    DO i=0, nproc-1
      !mp_gather    mydata, alldata, root, gid)
      CALL mp_gather({vname}_d, all_{vname}_d, i , world_comm)
      all_{vname}_h = all_{vname}_d
      !
  
      !
      IF (mpime == i) CALL test%assert_equal(SUM(all_{vname}_h) , valid_sum )
    END DO
    !
    !
    ! Test against CPU implementation
    CALL random_seed(size = n)
    ALLOCATE(seed(n))
    CALL random_seed(get=seed)
    WRITE (*, *) "Random seed: ", seed
    DEALLOCATE(seed)
    !
    DO i = 0, nproc-1
      CALL RANDOM_NUMBER(rnd)
      {vname}_h = {typeconv} ( 10.0 * rnd )
      {vname}_d = {vname}_h
      CALL mp_gather({vname}_d, all_{vname}_d, i , world_comm)
      CALL mp_gather({vname}_h, all_{vname}_h, i , world_comm)
      aux_h = all_{vname}_d
      CALL test%assert_equal(SUM(all_{vname}_h) , SUM(aux_h) )
    END DO
    !
    CALL print_results(test)
    !
    CALL mp_world_end()
    !
END PROGRAM test_mp_gather_{vname}_gpu
#else
PROGRAM test_mp_gather_{vname}_gpu
    CALL no_test()
END PROGRAM test_mp_gather_{vname}_gpu
#endif
