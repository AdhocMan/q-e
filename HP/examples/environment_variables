# environment_variables -- settings for running Quantum ESPRESSO examples

######## YOU MUST EDIT THIS FILE TO MATCH YOUR CONFIGURATION ########

# BIN_DIR = path of compiled executables
#     Usually this is $TOPDIR/bin, where $TOPDIR is the root of the
#     Quantum ESPRESSO source tree.
# PSEUDO_DIR = path of pseudopotentials required by the examples
#     If you have downloaded the full distribution, they should already
#     be in $TOPDIR/pseudo; otherwise you may download them from:
#     1. www.quantum-espresso.org/pseudopotentials/
#     2. http://qe-forge.org/gf/project/pslibrary/
#     3. http://theossrv1.epfl.ch/Main/Pseudopotentials
#     4. other websites
# TMP_DIR = temporary directory to be used by the examples
#     Make sure that it exists, is writable by you, and doesn't
#     contain any valuable data (everything there will be destroyed!).

# The following should be good in many cases 

PREFIX=`cd ../../.. ; pwd`
BIN_DIR=$PREFIX/bin
PSEUDO_DIR=$PREFIX/HP/examples/pseudo
# Beware: everything in $TMP_DIR will be destroyed !
TMP_DIR=$PREFIX/HP/examples/tmp

# To run the ESPRESSO programs on a parallel machine, you may have to
# add the appropriate commands (poe, mpirun, mpprun...) and/or options
# (specifying number of processors, pools...) before and after the
# executable's name.  That depends on how your machine is configured.
# For example on an IBM SP4:
#
#     poe             pw.x -procs 4              < file.in > file.out
#     ^^^ PARA_PREFIX      ^^^^^^^^ PARA_POSTFIX
#
# To run on a single processor, you can usually leave them empty.
# BEWARE: most tests and examples are devised to be run serially or on
# a small number of processors; do not use tests and examples to benchmark
# parallelism, do not run on too many processors

#PARA_PREFIX="mpirun -np 8"
PARA_PREFIX=" "
PARA_POSTFIX=" "
#
# available flags for hp.x: 
#                  -nk n        number of pools         (or -npool, -npools)
#                  -nt n        number of task groups   (or -ntg, -ntask_groups)
#

# function to test the exit status of a job
check_failure () {
    # usage: check_failure $?
    if test $1 != 0
    then
        $ECHO "Error condition encountered during test: exit status = $1"
        $ECHO "Aborting"
        exit 1
    fi
}

