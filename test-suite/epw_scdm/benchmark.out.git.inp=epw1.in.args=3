                                                                                      
                                       ``:oss/                                        
                           `.+s+.     .+ys--yh+     `./ss+.                           
                          -sh//yy+`   +yy   +yy    -+h+-oyy                           
                          -yh- .oyy/.-sh.   .syo-.:sy-  /yh                           
                 `.-.`    `yh+   -oyyyo.     `/syys:    oys      `.`                  
               `/+ssys+-` `sh+      `                   oys`   .:osyo`                
               -yh- ./syyooyo`                          .sys+/oyo--yh/                
               `yy+    .-:-.                             `-/+/:`  -sh-                
                /yh.                                              oys                 
          ``..---hho---------`   .---------..`      `.-----.`    -hd+---.             
       `./osmNMMMMMMMMMMMMMMMs. +NNMMMMMMMMNNmh+.   yNMMMMMNm-  oNMMMMMNmo++:`        
       +sy--/sdMMMhyyyyyyyNMMh- .oyNMMmyyyyyhNMMm+` -yMMMdyyo:` .oyyNMMNhs+syy`       
       -yy/   /MMM+.`-+/``mMMy-   `mMMh:`````.dMMN:` `MMMy-`-dhhy```mMMy:``+hs        
        -yy+` /MMMo:-mMM+`-oo/.    mMMh:     `dMMN/`  dMMm:`dMMMMy..MMMo-.+yo`        
         .sys`/MMMMNNMMMs-         mMMmyooooymMMNo:   oMMM/sMMMMMM++MMN//oh:          
          `sh+/MMMhyyMMMs- `-`     mMMMMMMMMMNmy+-`   -MMMhMMMsmMMmdMMd/yy+           
    `-/+++oyy-/MMM+.`/hh/.`mNm:`   mMMd+/////:-.`      NMMMMMd/:NMMMMMy:/yyo/:.`      
   +os+//:-..-oMMMo:--:::-/MMMo. .-mMMd+---`           hMMMMN+. oMMMMMo. `-+osyso:`   
   syo     `mNMMMMMNNNNNNNNMMMo.oNNMMMMMNNNN:`         +MMMMs:`  dMMMN/`     ``:syo   
   /yh`     :syyyyyyyyyyyyyyyy+.`+syyyyyyyyo:`         .oyys:`   .oyys:`        +yh   
   -yh-        ````````````````    `````````              ``        ``          oys   
   -+h/------------------------::::::::://////++++++++++++++++++++++///////::::/yd:   
   shdddddddddddddddddddddddddddddhhhhhhhhyyyyyssssssssssssssssyyyyyyyhhhhhhhddddh`   
                                                                                      
  S. Ponce, E. R. Margine, C. Verdi, and F. Giustino,                                 
                                                Comput. Phys. Commun. 209, 116 (2016) 
                                                                                      

     Program EPW v.5.2.0 starts on 26Nov2019 at 20:11:11 

     This program is part of the open-source Quantum ESPRESSO suite
     for quantum simulation of materials; please cite
         "P. Giannozzi et al., J. Phys.:Condens. Matter 21 395502 (2009);
         "P. Giannozzi et al., J. Phys.:Condens. Matter 29 465901 (2017);
          URL http://www.quantum-espresso.org", 
     in publications or presentations arising from this work. More details at
     http://www.quantum-espresso.org/quote

     Parallel version (MPI), running on     1 processors

     MPI processes distributed on     1 nodes

     Reading xml data from directory:

     ./si.save/

     IMPORTANT: XC functional enforced from input :
     Exchange-correlation= PZ
                           (   1   1   0   0   0   0   0)
     Any further DFT definition will be discarded
     Please, verify this is what you really want


     G-vector sticks info
     --------------------
     sticks:   dense  smooth     PW     G-vecs:    dense   smooth      PW
     Sum         583     583    199                 9257     9257    1759

     Reading collected, re-writing distributed wavefunctions

     --                                                                         

     bravais-lattice index     =            2
     lattice parameter (a_0)   =      10.2620  a.u.
     unit-cell volume          =     270.1693 (a.u.)^3
     number of atoms/cell      =            2
     number of atomic types    =            1
     kinetic-energy cut-off    =      40.0000  Ry
     charge density cut-off    =     160.0000  Ry
     Exchange-correlation= PZ
                           (   1   1   0   0   0   0   0)


     celldm(1)=   10.26200  celldm(2)=    0.00000  celldm(3)=    0.00000
     celldm(4)=    0.00000  celldm(5)=    0.00000  celldm(6)=    0.00000

     crystal axes: (cart. coord. in units of a_0)
               a(1) = ( -0.5000  0.0000  0.5000 )  
               a(2) = (  0.0000  0.5000  0.5000 )  
               a(3) = ( -0.5000  0.5000  0.0000 )  

     reciprocal axes: (cart. coord. in units 2 pi/a_0)
               b(1) = ( -1.0000 -1.0000  1.0000 )  
               b(2) = (  1.0000  1.0000  1.0000 )  
               b(3) = ( -1.0000  1.0000 -1.0000 )  


     Atoms inside the unit cell: 

   Cartesian axes

     site n.  atom      mass           positions (a_0 units)
        1        Si  28.0855   tau( 1) = (    0.00000    0.00000    0.00000  )
        2        Si  28.0855   tau( 2) = (    0.25000    0.25000    0.25000  )

     49 Sym.Ops. (with q -> -q+G )


     G cutoff =  426.7999  (   9257 G-vectors)     FFT grid: ( 32, 32, 32)
     number of k points=   64
                       cart. coord. in units 2pi/a_0
        k(    1) = (   0.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(    2) = (  -0.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(    3) = (  -0.5000000   0.5000000  -0.5000000), wk =   0.0312500
        k(    4) = (  -0.7500000   0.7500000  -0.7500000), wk =   0.0312500
        k(    5) = (   0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(    6) = (   0.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(    7) = (  -0.2500000   0.7500000  -0.2500000), wk =   0.0312500
        k(    8) = (  -0.5000000   1.0000000  -0.5000000), wk =   0.0312500
        k(    9) = (   0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   10) = (   0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   11) = (   0.0000000   1.0000000   0.0000000), wk =   0.0312500
        k(   12) = (  -0.2500000   1.2500000  -0.2500000), wk =   0.0312500
        k(   13) = (   0.7500000   0.7500000   0.7500000), wk =   0.0312500
        k(   14) = (   0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   15) = (   0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   16) = (   0.0000000   1.5000000   0.0000000), wk =   0.0312500
        k(   17) = (  -0.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   18) = (  -0.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   19) = (  -0.7500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   20) = (  -1.0000000   0.5000000  -0.5000000), wk =   0.0312500
        k(   21) = (   0.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   22) = (  -0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   23) = (  -0.5000000   0.5000000   0.0000000), wk =   0.0312500
        k(   24) = (  -0.7500000   0.7500000  -0.2500000), wk =   0.0312500
        k(   25) = (   0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   26) = (   0.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   27) = (  -0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   28) = (  -0.5000000   1.0000000   0.0000000), wk =   0.0312500
        k(   29) = (   0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   30) = (   0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   31) = (   0.0000000   1.0000000   0.5000000), wk =   0.0312500
        k(   32) = (  -0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   33) = (  -0.5000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   34) = (  -0.7500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   35) = (  -1.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(   36) = (  -1.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   37) = (  -0.2500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   38) = (  -0.5000000   0.0000000   0.5000000), wk =   0.0312500
        k(   39) = (  -0.7500000   0.2500000   0.2500000), wk =   0.0312500
        k(   40) = (  -1.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(   41) = (   0.0000000   0.0000000   1.0000000), wk =   0.0312500
        k(   42) = (  -0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   43) = (  -0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   44) = (  -0.7500000   0.7500000   0.2500000), wk =   0.0312500
        k(   45) = (   0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   46) = (   0.0000000   0.5000000   1.0000000), wk =   0.0312500
        k(   47) = (  -0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   48) = (  -0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   49) = (  -0.7500000  -0.7500000   0.7500000), wk =   0.0312500
        k(   50) = (  -1.0000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   51) = (  -1.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   52) = (  -1.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   53) = (  -0.5000000  -0.5000000   1.0000000), wk =   0.0312500
        k(   54) = (  -0.7500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   55) = (  -1.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   56) = (  -1.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   57) = (  -0.2500000  -0.2500000   1.2500000), wk =   0.0312500
        k(   58) = (  -0.5000000   0.0000000   1.0000000), wk =   0.0312500
        k(   59) = (  -0.7500000   0.2500000   0.7500000), wk =   0.0312500
        k(   60) = (  -1.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   61) = (   0.0000000   0.0000000   1.5000000), wk =   0.0312500
        k(   62) = (  -0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   63) = (  -0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   64) = (  -0.7500000   0.7500000   0.7500000), wk =   0.0312500

     PseudoPot. # 1 for Si read from file:
     ../../pseudo/Si.pz-vbc.UPF
     MD5 check sum: 9f25e6ff280f3123e9b3a84715b2e9c9
     Pseudo is Norm-conserving, Zval =  4.0
     Generated by new atomic code, or converted to UPF format
     Using radial grid of  431 points,  2 beta functions with: 
                l(1) =   0
                l(2) =   1
     EPW          :      0.13s CPU      0.13s WALL

     EPW          :      0.23s CPU      0.24s WALL

     No wavefunction gauge setting applied
     -------------------------------------------------------------------
     Wannierization on  4 x  4 x  4 electronic grid
     -------------------------------------------------------------------

     Spin CASE ( default = unpolarized )

     Initializing Wannier90


     Initial Wannier projections

     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   1
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   2
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   3
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   4
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   1
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   2
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   3
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   4

      - Number of bands is ( 12)
      - Number of total bands is ( 12)
      - Number of excluded bands is (  0)
      - Number of wannier functions is (  8)
      - All guiding functions are given 

  Reading data about k-point neighbours 

      - All neighbours are found 

     AMN
      k points =    64 in    1 pools
            1 of   64 on ionode
            2 of   64 on ionode
            3 of   64 on ionode
            4 of   64 on ionode
            5 of   64 on ionode
            6 of   64 on ionode
            7 of   64 on ionode
            8 of   64 on ionode
            9 of   64 on ionode
           10 of   64 on ionode
           11 of   64 on ionode
           12 of   64 on ionode
           13 of   64 on ionode
           14 of   64 on ionode
           15 of   64 on ionode
           16 of   64 on ionode
           17 of   64 on ionode
           18 of   64 on ionode
           19 of   64 on ionode
           20 of   64 on ionode
           21 of   64 on ionode
           22 of   64 on ionode
           23 of   64 on ionode
           24 of   64 on ionode
           25 of   64 on ionode
           26 of   64 on ionode
           27 of   64 on ionode
           28 of   64 on ionode
           29 of   64 on ionode
           30 of   64 on ionode
           31 of   64 on ionode
           32 of   64 on ionode
           33 of   64 on ionode
           34 of   64 on ionode
           35 of   64 on ionode
           36 of   64 on ionode
           37 of   64 on ionode
           38 of   64 on ionode
           39 of   64 on ionode
           40 of   64 on ionode
           41 of   64 on ionode
           42 of   64 on ionode
           43 of   64 on ionode
           44 of   64 on ionode
           45 of   64 on ionode
           46 of   64 on ionode
           47 of   64 on ionode
           48 of   64 on ionode
           49 of   64 on ionode
           50 of   64 on ionode
           51 of   64 on ionode
           52 of   64 on ionode
           53 of   64 on ionode
           54 of   64 on ionode
           55 of   64 on ionode
           56 of   64 on ionode
           57 of   64 on ionode
           58 of   64 on ionode
           59 of   64 on ionode
           60 of   64 on ionode
           61 of   64 on ionode
           62 of   64 on ionode
           63 of   64 on ionode
           64 of   64 on ionode

     AMN calculated

     MMN
      k points =    64 in    1 pools
            1 of   64 on ionode
            2 of   64 on ionode
            3 of   64 on ionode
            4 of   64 on ionode
            5 of   64 on ionode
            6 of   64 on ionode
            7 of   64 on ionode
            8 of   64 on ionode
            9 of   64 on ionode
           10 of   64 on ionode
           11 of   64 on ionode
           12 of   64 on ionode
           13 of   64 on ionode
           14 of   64 on ionode
           15 of   64 on ionode
           16 of   64 on ionode
           17 of   64 on ionode
           18 of   64 on ionode
           19 of   64 on ionode
           20 of   64 on ionode
           21 of   64 on ionode
           22 of   64 on ionode
           23 of   64 on ionode
           24 of   64 on ionode
           25 of   64 on ionode
           26 of   64 on ionode
           27 of   64 on ionode
           28 of   64 on ionode
           29 of   64 on ionode
           30 of   64 on ionode
           31 of   64 on ionode
           32 of   64 on ionode
           33 of   64 on ionode
           34 of   64 on ionode
           35 of   64 on ionode
           36 of   64 on ionode
           37 of   64 on ionode
           38 of   64 on ionode
           39 of   64 on ionode
           40 of   64 on ionode
           41 of   64 on ionode
           42 of   64 on ionode
           43 of   64 on ionode
           44 of   64 on ionode
           45 of   64 on ionode
           46 of   64 on ionode
           47 of   64 on ionode
           48 of   64 on ionode
           49 of   64 on ionode
           50 of   64 on ionode
           51 of   64 on ionode
           52 of   64 on ionode
           53 of   64 on ionode
           54 of   64 on ionode
           55 of   64 on ionode
           56 of   64 on ionode
           57 of   64 on ionode
           58 of   64 on ionode
           59 of   64 on ionode
           60 of   64 on ionode
           61 of   64 on ionode
           62 of   64 on ionode
           63 of   64 on ionode
           64 of   64 on ionode
     MMN calculated

     Running Wannier90

     Wannier Function centers (cartesian, alat) and spreads (ang):

     (   0.08485   0.08503  -0.08491) :   1.80784
     (   0.08542  -0.08509   0.08414) :   1.81064
     (  -0.08445  -0.08474  -0.08534) :   1.81329
     (  -0.08555   0.08401   0.08560) :   1.79927
     (   0.33445   0.33474   0.33534) :   1.81329
     (   0.33555   0.16599   0.16440) :   1.79927
     (   0.16458   0.33509   0.16586) :   1.81064
     (   0.16515   0.16497   0.33491) :   1.80783

     -------------------------------------------------------------------
     WANNIER      :     18.37s CPU     18.44s WALL (       1 calls)
     -------------------------------------------------------------------

     Dipole matrix elements calculated


     Calculating kgmap

     Progress kgmap: ########################################
     kmaps        :      3.82s CPU      3.85s WALL (       1 calls)
     Symmetries of Bravais lattice:  48
     Symmetries of crystal:          48


     ===================================================================
     irreducible q point #    1
     ===================================================================

     Symmetries of small group of q: 48
          in addition sym. q -> -q+G:

     Number of q in the star =    1
     List of q in the star:
          1   0.000000000   0.000000000   0.000000000
     Imposing acoustic sum rule on the dynamical matrix
     Read dielectric tensor and effective charges

        q(    1 ) = (   0.0000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    2
     ===================================================================

     Symmetries of small group of q: 12
          in addition sym. q -> -q+G:

     Number of q in the star =    4
     List of q in the star:
          1   0.500000000  -0.500000000   0.500000000
          2   0.500000000   0.500000000  -0.500000000
          3  -0.500000000  -0.500000000  -0.500000000
          4   0.500000000  -0.500000000  -0.500000000

        q(    2 ) = (   0.5000000  -0.5000000   0.5000000 )
        q(    3 ) = (   0.5000000   0.5000000  -0.5000000 )
        q(    4 ) = (  -0.5000000  -0.5000000  -0.5000000 )
        q(    5 ) = (   0.5000000  -0.5000000  -0.5000000 )


     ===================================================================
     irreducible q point #    3
     ===================================================================

     Symmetries of small group of q: 16
          in addition sym. q -> -q+G:

     Number of q in the star =    3
     List of q in the star:
          1   0.000000000  -1.000000000   0.000000000
          2  -1.000000000   0.000000000   0.000000000
          3   0.000000000   0.000000000   1.000000000

        q(    6 ) = (   0.0000000  -1.0000000   0.0000000 )
        q(    7 ) = (  -1.0000000   0.0000000   0.0000000 )
        q(    8 ) = (   0.0000000   0.0000000   1.0000000 )

     Writing epmatq on .epb files


     The .epb files have been correctly written


     Band disentanglement is used: nbndsub =    8
     Use zone-centred Wigner-Seitz cells 
     Number of WS vectors for electrons       93
     Number of WS vectors for phonons       19
     Number of WS vectors for electron-phonon       19
     Maximum number of cores for efficient parallelization      114
     Results may improve by using use_ws == .TRUE. 

     Writing Hamiltonian, Dynamical matrix and EP vertex in Wann rep to file

     ===================================================================
     Memory usage:  VmHWM =        57Mb
                   VmPeak =       366Mb
     ===================================================================
     
     Using q-mesh file: path.dat
     Size of q point mesh for interpolation:          1
     Using k-mesh file: path.dat
     Size of k point mesh for interpolation:          2
     Max number of k points per pool:                2

     Fermi energy coarse grid =   0.000000 eV

     Fermi energy is calculated from the fine k-mesh: Ef =   7.429981 eV

     Warning: check if difference with Fermi level fine grid makes sense

     ===================================================================

              ibndmin =     5  ebndmin =     0.632
              ibndmax =     7  ebndmax =     0.632


     Number of ep-matrix elements per pool :           54 ~=    0.42 Kb (@ 8 bytes/ DP)
      
     A selecq.fmt file was found but re-created because selecqread == .FALSE. 
     We only need to compute        1 q-points
      

     ===================================================================
     Electron (Imaginary) Self-Energy in the Migdal Approximation
     ===================================================================


     Fermi Surface thickness =   1.200000 eV

     Golden Rule strictly enforced with T =   0.000086 eV
     Gaussian Broadening:   0.010000 eV, ngauss=   1
 
     Average over degenerate eigenstates is performed
     WARNING: only the eigenstates within the Fermi window are meaningful

     ik =       1 coord.:    0.0000000   0.0000000   0.0000000
     -------------------------------------------------------------------
     E(   5 )=   1.1748 eV   Re[Sigma]=    -606.123822 meV Im[Sigma]=       0.000000 meV     Z=       0.097820 lam=       9.222820
     E(   6 )=   1.1750 eV   Re[Sigma]=    -607.416073 meV Im[Sigma]=       0.000000 meV     Z=       0.097522 lam=       9.254132
     E(   7 )=   1.1751 eV   Re[Sigma]=    -608.845164 meV Im[Sigma]=       0.000000 meV     Z=       0.097164 lam=       9.291834
     -------------------------------------------------------------------

        1        5      1.1748   -606.1238      0.0000      0.0978      9.2228
  
        1        6      1.1750   -607.4161      0.0000      0.0975      9.2541
  
        1        7      1.1751   -608.8452      0.0000      0.0972      9.2918
  
     ===================================================================
     Memory usage:  VmHWM =        57Mb
                   VmPeak =       383Mb
     ===================================================================


     Unfolding on the coarse grid
     elphon_wrap  :     45.15s CPU     45.73s WALL (       1 calls)

     INITIALIZATION: 

     init_vloc    :      0.00s CPU      0.00s WALL (       1 calls)
     init_us_1    :      0.01s CPU      0.01s WALL (       2 calls)



     Electron-Phonon interpolation
     ephwann      :      0.39s CPU      0.41s WALL (       1 calls)
     ep-interp    :      0.00s CPU      0.00s WALL (       1 calls)

     Ham: step 1  :      0.00s CPU      0.00s WALL (       1 calls)
     Ham: step 2  :      0.00s CPU      0.00s WALL (       1 calls)
     ep: step 1   :      0.01s CPU      0.01s WALL (      48 calls)
     ep: step 2   :      0.15s CPU      0.15s WALL (      48 calls)
     DynW2B       :      0.00s CPU      0.00s WALL (       1 calls)
     HamW2B       :      0.00s CPU      0.00s WALL (       6 calls)
     ephW2Bp      :      0.00s CPU      0.00s WALL (       1 calls)
     ephW2B       :      0.00s CPU      0.00s WALL (       1 calls)


     Total program execution
     EPW          :   1m 4.15s CPU   1m 4.82s WALL

                                                                                          
 Please consider citing:                                                                  
 S. Ponce, E. R. Margine, C. Verdi and F. Giustino, Comput. Phys. Commun. 209, 116 (2016) 
                                                                                          
